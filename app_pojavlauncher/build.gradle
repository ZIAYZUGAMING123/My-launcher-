plugins {
    id 'com.android.application' version '8.7.2'
    id 'de.undercouch.download' version '5.6.0'
    id 'org.ajoberstar.grgit' version '4.1.1'
}

import de.undercouch.gradle.tasks.download.Download

static def getDate() { return new Date().format('yyyyMMdd') }

static def getDateSeconds() {
    if (System.getenv("GITHUB_ACTIONS") == "true") {
        return Integer.parseInt(System.getenv("GITHUB_RUN_NUMBER"))
    } else {
        return 172005
    }
}

def getVersionName = {
    def currentBranch = grgit.branch.current()
    def latestCommit = grgit.log(maxCommits: 1)
    def dateToday = getDate();
    if(currentBranch == null || latestCommit == null) {
        return "LOCAL-${dateToday}";
    }else {
        def branchName = currentBranch.getName();
        def commitAbbreviation = latestCommit.abbreviatedId;
        return "hebe-${dateToday}-${commitAbbreviation}-${branchName}"
    }
}

def getCFApiKey = {
    String key = System.getenv("CURSEFORGE_API_KEY");
    if(key != null) return key;
    File curseforgeKeyFile = new File("./curseforge_key.txt");
    if(curseforgeKeyFile.canRead() && curseforgeKeyFile.isFile()) {
        return curseforgeKeyFile.text;
    }
    logger.warn('BUILD: You have no CurseForge key, the curseforge api will get disabled !');
    return "DUMMY";
}

configurations {
    instrumentedClasspath {
        canBeConsumed = false
        canBeResolved = true
    }
}

android {
    namespace 'git.artdeell.mojo'

    compileSdk = 34

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        customDebug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        googlePlayBuild {
            storeFile file("mojo_upload.jks")
            storePassword System.getenv("UPLOAD_KEYSTORE_PASSWORD")
            keyAlias "key0"
            keyPassword System.getenv("UPLOAD_KEYSTORE_PASSWORD")
        }
    }

    defaultConfig {
        applicationId "git.artdeell.mojo"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode getDateSeconds()
        versionName getVersionName()
        multiDexEnabled true //important
        resValue 'string', 'curseforge_api_key', getCFApiKey()
    }

    flavorDimensions "runtime"
    
    productFlavors {
        full {
            dimension "runtime"
        }
        
        noruntime {
            dimension "runtime"
            versionNameSuffix "-noruntime"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.customDebug
            resValue 'string', 'application_package', 'git.artdeell.mojo.debug'
            resValue 'string', 'storageProviderAuthorities', 'git.artdeell.mojo.scoped.gamefolder.debug'
        }
        proguard {
            initWith debug
            minifyEnabled true
            shrinkResources true
        }
        proguardNoDebug {
            initWith proguard
            debuggable false
        }

        release {
            // Don't set to true or java.awt will be a.a or something similar.
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // defaultConfig already set
            // multiDexEnabled = true
            // debuggable = true
            resValue 'string', 'storageProviderAuthorities', 'git.artdeell.mojo.scoped.gamefolder'
            resValue 'string', 'application_package', 'git.artdeell.mojo'
        }
        gplay {
            initWith release
            signingConfig signingConfigs.googlePlayBuild
        }
    }

    ndkVersion = "25.2.9519653"

    externalNativeBuild {
        ndkBuild {
            path file('src/main/jni/Android.mk')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
        pickFirst '**/libbytehook.so'
    }

    buildFeatures {
        prefab true
        buildConfig true
    }

    buildToolsVersion = '34.0.0'
}

class AssetTaskRegistrar {
    private Project project
    private Task mergeAssetsTask
    private File targetAssetsDir
    private String variantName
    private File targetDownloadDir
    private File projectJarDir

    AssetTaskRegistrar(Project project) {
        this.project = project

        targetDownloadDir = new File(project.projectDir, "build/intermediates/download_deps")
        projectJarDir = new File(project.projectDir, "build/intermediates/package_jar_deps")
        createDirectories targetDownloadDir
        createDirectories projectJarDir
    }

    def setVariant(variant) {
        variantName = variant.getName().capitalize()
        mergeAssetsTask = variant.getMergeAssetsProvider().get()

        targetAssetsDir = new File(project.projectDir, "build/intermediates/remote_asset_set/${variantName.toLowerCase()}/")
        createDirectories(targetAssetsDir)

        project.android.sourceSets[variant.getName()].assets.srcDirs += targetAssetsDir.absolutePath
    }

    static def createDirectories(File location) {
        if(!location.isDirectory() && !location.mkdirs())
            throw new RuntimeException("Failed to create directory "+location.getAbsolutePath())
    }

    static def writeVersion(File dir) {
        File versionFile = new File(dir, "version")
        versionFile.write(String.valueOf(new Date().getTime()))
    }

    private def assetDestination(String relativePath) {
        return new File(targetAssetsDir, relativePath);
    }

    private def onlineUnzipTask(String downloadUrl, String name, File targetExtractionDir) {
        createDirectories targetExtractionDir

        def downloadTarget = new File(targetDownloadDir, name)

        def dependencySuffix = "${name}${variantName}"
        def downloadTask = project.tasks.register("download${dependencySuffix}", Download) {
            src downloadUrl
            dest downloadTarget
            overwrite false
        };

        def unzipTask = project.tasks.register("unzip${dependencySuffix}", Copy) {
            from project.zipTree(downloadTarget)
            into targetExtractionDir
            dependsOn downloadTask
        }
        return unzipTask
    }

    def onlineZipDependency(String downloadUrl, String name, String relativePath) {
	    mergeAssetsTask.dependsOn(onlineUnzipTask downloadUrl, name, assetDestination(relativePath))
    }

    def projectJarDependency(Project project, String relativePath) {
        def assetTargetDir = assetDestination(relativePath)
        def jarTargetDir = new File(projectJarDir, relativePath)
        createDirectories assetTargetDir
        createDirectories jarTargetDir

        def copyTaskName = "copyProjectJar${jarTargetDir.getName()}${variantName}"
        def copyTask = project.tasks.register(copyTaskName, Copy) {
            from jarTargetDir
            into assetTargetDir
            // Nasty hack: explicitly reference project by name to force Gradle to configure it.
            // Makes jar task search below work properly for fresh configurations.
            dependsOn ":${project.name}:jar"
        }

        mergeAssetsTask.dependsOn copyTask;

        project.tasks.withType(org.gradle.jvm.tasks.Jar.class).configureEach {
            it.destinationDirectory = jarTargetDir
            doLast {
                if(!it.didWork) return
                writeVersion jarTargetDir
            }
        }
    }

    def onlineJarDependency(String downloadUrl, String name, String relativePath) {
        File targetDir = assetDestination(relativePath);
        def unzipTask = onlineUnzipTask(downloadUrl, name, targetDir).get()
        unzipTask.doLast {
            println("unzipTask.doLast()")
            if(!unzipTask.didWork) return
            writeVersion targetDir
        }
        mergeAssetsTask.dependsOn(unzipTask)
    }
}

afterEvaluate {
    def registrar = new AssetTaskRegistrar(project);

    android.applicationVariants.configureEach { variant ->
        registrar.setVariant(variant)

        registrar.projectJarDependency project(":forge_installer"), "components/forge_installer"
        registrar.projectJarDependency project(":arc_dns_injector"), "components/arc_dns_injector"
        registrar.projectJarDependency project(":jre_lwjgl3glfw"), "components/lwjgl3"

		if (variant.getName().toLowerCase().contains("full")) {
        	def jreBuildRepository = "https://nightly.link/MojoLauncher/android-openjdk-build-multiarch/workflows/build";

			registrar.onlineZipDependency "${jreBuildRepository}/buildjre8/jre8-pojav.zip", "ComponentRuntime8", "components/jre/"
        	registrar.onlineZipDependency "${jreBuildRepository}/buildjre17-21/jre17-pojav.zip", "ComponentRuntime17", "components/jre-new"
        	registrar.onlineZipDependency "${jreBuildRepository}/buildjre17-21/jre21-pojav.zip", "ComponentRuntime21", "components/jre-21"
        }
        
		def cacioBuildRepository = "https://nightly.link/MojoLauncher/%s/workflows/maven/master/caciocavallo.zip"

        registrar.onlineJarDependency String.format(cacioBuildRepository, "caciocavallo"), "Caciocavallo", "components/caciocavallo"
        registrar.onlineJarDependency String.format(cacioBuildRepository, "caciocavallo17"), "Caciocavallo17", "components/caciocavallo17"
    }
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'commons-codec:commons-codec:1.15'
    // implementation 'com.wu-man:android-bsf-api:3.1.3'
    implementation 'androidx.preference:preference:1.2.0'
    //implementation 'androidx.core:core:1.7.0'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-beta01'
    implementation 'androidx.annotation:annotation:1.5.0'

    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    implementation 'com.github.duanhong169:checkerboarddrawable:1.0.2'
    implementation 'com.github.PojavLauncherTeam:portrait-sdp:ed33e89cbc'
    implementation 'com.github.PojavLauncherTeam:portrait-ssp:6c02fd739b'
    implementation 'com.github.Mathias-Boulay:ExtendedView:1.0.0'
    implementation 'com.github.Mathias-Boulay:android_gamepad_remapper:2.0.3'
    implementation 'com.github.Mathias-Boulay:virtual-joystick-android:1.14'

    // implementation 'com.intuit.sdp:sdp-android:1.0.5'
    // implementation 'com.intuit.ssp:ssp-android:1.0.5'

    implementation 'org.tukaani:xz:1.8'
    // Our version of exp4j can be built from source at
    // https://github.com/PojavLauncherTeam/exp4j
    implementation 'net.sourceforge.htmlcleaner:htmlcleaner:2.6.1'
    implementation 'com.bytedance:bytehook:1.0.9'

    // implementation 'net.sourceforge.streamsupport:streamsupport-cfuture:1.7.0'

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
}
